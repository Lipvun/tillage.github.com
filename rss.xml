<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
	<channel>
		<description><![CDATA[Tillage]]></description>
		<title><![CDATA[Tillage]]></title>
		<link>http://tillage.github.com/</link>
		<pubDate>2013-01-23T22:53:44+08:00</pubDate>
 
		
		<item>
			<description>
				<![CDATA[
				<h3>实时某个目录下查看最新改动过的文件</h3>

<pre><code>watch -d -n 1 'df; ls -FlAt /path'
</code></pre>

<p>在使用这条命令时你需要替换其中的 /path 部分，watch 是实时监控工具，-d 参数会高亮显示变化的区域，-n 1 参数表示刷新间隔为 1 秒。
df; ls -FlAt /path 运行了两条命令，df 是输出磁盘使用情况，ls -FlAt 则列出 /path 下面的所有文件。
ls -FlAt 的参数详解：</p>

<ul>
<li>-F 在文件后面加一个文件符号表示文件类型，共有 <em>/=>@| 这几种类型，</em> 表示可执行文件，/ 表示目录，= 表示接口( sockets) ，> 表示门， @ 表示符号链接， | 表示管道。</li>
<li>-l 以列表方式显示</li>
<li>-A 显示 . 和 ..</li>
<li>-t 根据时间排序文件</li>
</ul>


<h3>通过 SSH 挂载远程主机上的文件夹</h3>

<pre><code>sshfs name@server:/path/to/folder /path/to/mount/point
</code></pre>

<p>这条命令可以让你通过 SSH 加载远程主机上的文件系统为本地磁盘，前提是你需要安装 FUSE 及 sshfs 这两个软件。</p>

<p>卸载的话使用 fusermount 命令：</p>

<pre><code>fusermount -u /path/to/mount/point
</code></pre>

<h3>通过 DNS 来读取 Wikipedia 的词条</h3>

<pre><code>dig +short txt &lt;keyword&gt;.wp.dg.cx
</code></pre>

<p>这也许是最有趣的一条技巧了，David Leadbeater 创建了一个 DNS 服务器，通过它当你查询一个 TXT 记录类型时，会返回一条来自于 Wikipedia 的简短的词条文字，这是他的介绍。
这里有一个样例，来查询 &#8220;hacker&#8221; 的含义：</p>

<pre><code>$ dig +short txt hacker.wp.dg.cx
"Hacker may refer to: Hacker (computer security), someone involved in computer security/insecurity, Hacker (programmer subculture), a programmer subculture originating in the US academia in the 1960s, which is nowadays mainly notable for the free software/" "open source movement, Hacker (hobbyist), an enthusiastic home computer hobbyist http://a.vu/w:Hacker"
</code></pre>

<p>这里使用了 dig 命令，这是标准的用来查询 DNS 的系统管理工具，+short 参数是让其仅仅返回文字响应，txt 则是指定查询 TXT 记录类型。
更简单的做法是你可以为这个技巧创建一个别名：</p>

<pre><code>wiki() { dig +short txt $1.wp.dg.cx; }
</code></pre>

<p>然后试试吧：</p>

<pre><code>$ wiki hacker
"Hacker may refer to: Hacker (computer security), ..."
</code></pre>

<p>如果你不想用 dig ，也可以用 host 命令：</p>

<pre><code>host -t txt hacker.wp.dg.cx
</code></pre>

<h3>用 Wget 的递归方式下载整个网站</h3>

<pre><code>wget --random-wait -r -p -e robots=off -U Mozilla www.example.com
</code></pre>

<p>参数解释：</p>

<ul>
<li>&#8211;random-wait 等待 0.5 到 1.5 秒的时间来进行下一次请求</li>
<li>-r 开启递归检索</li>
<li>-e robots=off 忽略 robots.txt</li>
<li>-U Mozilla 设置 User-Agent 头为 Mozilla</li>
</ul>


<p>其它一些有用的参数：</p>

<ul>
<li>&#8211;limit-rate=20K 限制下载速度为 20K</li>
<li>-o logfile.txt 记录下载日志</li>
<li>-l 0 删除深度（默认为5）</li>
<li>&#8211;wait=1h 每下载一个文件后等待1小时</li>
</ul>


<h3>复制最后使用的命令中的参数</h3>

<pre><code>ALT + . (or ESC + .)
</code></pre>

<p>这个快捷键只能工作于 shell 的 emacs 编辑模式，它可以从最后使用的命令行中复制参数到当前命令行中，下面是一个样例：</p>

<pre><code>$ echo a b c 
a b c
$ echo &lt;Press ALT + .&gt; 
$ echo c
</code></pre>

<p>你可以重复执行该快捷键，以便获取自已需要的参数，</p>

<p>另外，假如你想指定第1个或第2个，或者是第 n 个参数的话，可以按 ALT + 1 (或 ESC + 1) 或 ALT + 2 (或 ESC +2) 这样形式的快捷键。</p>

<h3>执行一条命令但不保存到 history 中</h3>

<pre><code>&lt;space&gt; command
</code></pre>

<p>这个行为可以通过 $HISTIGNORE shell 变量来控制。设置为 HISTIGNORE=&#8221;&amp;:[ ]*&#8221; ，表示不保存重复的命令到 history 中，并且不保存以空格开头的命令行。$HISTIGNORE 中的值以冒号分隔。</p>

<h3>显示当前目录中所有子目录的大小</h3>

<pre><code>du -h --max-depth=1
</code></pre>

<h3>显示消耗内存最多的 10 个运行中的进程，以内存使用量排序</h3>

<pre><code>ps aux | sort -nk +4 | tail
</code></pre>

<p>这是一个典型的管道应用，通过 ps aux 来输出到 sort 命令，并用 sort 排序列出 4 栏，再进一步转到 tail 命令，最终输出 10 行显示使用内存最多的进程情况。
假如想要发现哪个进程使用了大量内存的话，我通常会使用 htop 或 top 而非 ps 。</p>

<h3>用 python 快速开启一个 SMTP 服务</h3>

<pre><code>python -m smtpd -n -c DebuggingServer localhost:1025
</code></pre>

<p>这是一个用 Python 标准库 smtpd （用 -m smtpd 指定) 实现在简易 SMTP 服务，运行于 1025 端口 。</p>

<p>另外三个参数的解释：</p>

<ul>
<li>-n 参数让 Python 不要进行 setuid ( 改变用户）为 &#8220;nobody&#8221; ，也就是说直接用你的帐号来运行</li>
<li>-c DebuggingServer 参数是让 Python 运行时在屏幕上输出调试及运行信息</li>
<li>localhost:1025 参数则是让 Python 在本地的 1025 端口上开启 SMTP 服务</li>
</ul>


<p>另外，假如你想让程序运行于标准的 25 的端口上的话，你必须使用 sudo 命令，因为只有 root 才能在 1-1024 端口上开启服务。如下：</p>

<pre><code>sudo python -m smtpd -n -c DebuggingServer localhost:25
</code></pre>

<h3>查看ASCII码表</h3>

<pre><code>man 7 ascii 
</code></pre>

<p>manpages里面还有一些有趣而且实用的资料，可能鲜为人知：</p>

<ul>
<li>man 1 intro - 一篇对从未接触过Linux的用户的简明教程。</li>
<li>man 2 syscalls - 内核系统请求的列表，按内核版本注释分类，系统编程必备。</li>
<li>man 2 select_tut - 关于select()系统请求的教程。</li>
<li>man 3 string - 在头文件内的所有函数。</li>
<li>man 3 stdio - 关于头文件的使用，标准输入/输出库的说明。</li>
<li>man 3 errno - 所有errorno的取值及说明。（C语言内类似其他语言的异常告知机制）</li>
<li>man 4 console_codes - Linux的终端控制码及其使用解释。</li>
<li>man 4 full - 介绍/dev/full这个总是处于&#8221;满&#8221;状态的磁盘。（对应/dev/null这个总是空的设备）</li>
<li>man 5 proc - 介绍/proc下的文件系统。</li>
<li>man 5 filesystems - 各种Linux文件系统。</li>
</ul>


<p>第7区里面的资料通常最酷：</p>

<ul>
<li>man 7 bootparam - 详细解释内核启动参数。</li>
<li>man 7 charsets - 解释各种语言的编码集。（gbk，gb2312等）</li>
<li>man 7 glob - 解释glob文件名管理机制的工作过程。</li>
<li>man 7 hier - 解释Linux文件系统结构各个部分的作用。</li>
<li>man 7 operator - C语言的运算符的列表。</li>
<li>man 7 regex - 介绍正则表达式。</li>
<li>man 7 suffixes - 常见文件后缀名的列表跟解释。</li>
<li>man 7 time - Linux的时钟机制解释。</li>
<li>man 7 units - 数值单位及其数值的解释。</li>
<li>man 7 utf8 - 描述UTF-8编码。</li>
<li>man 7 url - 解释URL、URI、URN等的标准。</li>
</ul>


<h3>简易计时器</h3>

<pre><code>time read
</code></pre>

<p>运行命令开始算起，到结束时按一下Enter，就显示出整个过程的时间，精确到ms级别。</p>

<p>time是用来计算一个进程在运行到结束过程耗费多少时间的程序，它的输出通常有三项：</p>

<pre><code>$ time ls /opt 
... 

real 0m0.008s 
user 0m0.003s 
sys 0m0.007s 
</code></pre>

<p>real指整个程序对真实世界而言运行所需时间，user指程序在用户空间运行的时间，sys指程序对系统调用锁占用时间。
read本来是一个读取用户输入的命令，常见用法是read LINE，用户输入并回车后，键入的内容就被保存到$LINE变量内，但在键入回车前，这个命令是一直阻塞的。可见time read这命令灵活地利用了操作系统的阻塞。</p>

<h3>远程关掉一台WINDOWS机器</h3>

<pre><code>net rpc shutdown -I IP_ADDRESS -U username%password 
</code></pre>

<p>Windows平台上的net命令是比较强大的，因为其后台是一个RPC类的系统服务，大家应该看过win下用net use file:///C|/ip/ipc%24 *这样一个命令建立IPC空连接，入侵主机的事情。
Linux下的net命令是samba组件的程序，通常包含在smbclient内，可以跟windows主机的文件、打印机共享等服务进行通讯，但是也支持rpc命令。
上述命令就是在远程Windows主机上执行了shutdown命令。当然这不一定成功，关系到win主机上面的安全设置。net命令能够控制到win主机就是了。</p>

<h3>在一个子SHELL中运行一个命令</h3>

<pre><code>(cd /tmp &amp;&amp; ls)
</code></pre>

<p>当然这只是演示，要查看目录当然可以ls /tmp。
好处就是不会改变当前shell的目录，以及如果命令中设计环境变量，也不会对当前shell有任何修改。
在Shell编程中还有很多使用上引号来括住一个命令：<code>ls /tmp</code>，这也是子shell过程。可是上引号的方法无法嵌套，而使用小括号的方法可以，一个比较纠结的例子是：</p>

<pre><code>echo $(echo -e file:///C|/x%24%28printf "%x" 65))
</code></pre>

<h3>清空屏幕</h3>

<pre><code>&lt;CTRL+l&gt;;
</code></pre>

<p>reset命令重置终端的作用有些类似，其实都只是发送一段控制序列，让终端的显示复位。</p>

<p>还可以这样运行：</p>

<pre><code>tput clear
</code></pre>

<p>tput是专门用来控制终端的一个小工具，也挺强大的，详细信息运行man tput查看。</p>

<h3>列出你最常用的10条命令</h3>

<pre><code>history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head
</code></pre>

<h3>用TELNET看《星球大战》</h3>

<pre><code>telnet towel.blinkenlights.nl 
</code></pre>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[神级Linux Shell 下篇]]></title>
			<link>http://tillage.github.com/Linux/linux-shell-2/</link>
			<pubDate>2013-01-23T22:16:00+08:00</pubDate>
			<guid isPermaLink="false">http://tillage.github.com/Linux/linux-shell-2</guid>
 
			<source url="http://tillage.github.com/rss.xml"><![CDATA[Tillage]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<h3>SUDO运行上条命令</h3>

<pre><code>$ sudo !!
</code></pre>

<p>等同时<code>CTRL-P</code>按<code>CTRL-A</code>输入<code>sudo</code> + <code>空格</code> 回车
两个感叹号其实是bash的一个特性，称为事件引用符（event designators）。!!其实相当于!-1，引用前一条命令，当然也可以!-2，!-50。默认情况下bash会在~/.bash_history文件内记录用户执行的最近500条命令，history命令可以显示这些命令。</p>

<h3>以HTTP方式共享当前文件夹的文件</h3>

<pre><code>$ python -m SimpleHTTPServer
</code></pre>

<p>这命令启动了Python的SimpleHTTPServer模块，考虑到Python在绝大多数的Linux发行版当中都默认安装，所以这个命令很可能是最简单的跨平台传文件的方法。命令执行后将在本机8000端口开放HTTP服务。</p>

<h3>以普通用户打开的VIM当中保存一个ROOT用户文件</h3>

<pre><code>:w !sudo tee %
</code></pre>

<p>命令:w!{cmd}，让vim执行一个外部命令{cmd}，然后把当前缓冲区的内容从stdin传入。tee是一个把stdin保存到文件的小工具。而%，是vim当中一个只读寄存器的名字，总保存着当前编辑文件的文件路径。</p>

<h3>切换回上一个目录</h3>

<pre><code>$ cd -
</code></pre>

<p>实际上cd -就是cd $OLDPWD的简写,相对地，$PWD总保存着当前目录的路径。</p>

<h3>替换上一条命令中的一个短语</h3>

<pre><code>$ ^foo^bar^
</code></pre>

<p>原始样式是：</p>

<pre><code>!!:s/foo/bar/
</code></pre>

<p>即把上一条命令中的<code>foo</code>替换为<code>bar</code>后运行。
或：修改命令的方法是使用fc命令（Fix Command），<code>fc -s foo=bar</code>在编辑器里面打开上一句命令。</p>

<h3>快速备份一个文件</h3>

<pre><code>$ cp filename{,.bak}
</code></pre>

<p>其原理就在于bash对大括号的展开操作，filename{,.bak}这一段会被展开成filename filename.bak再传给cp，于是就有了备份的命令了。</p>

<h3>抓取LINUX桌面的视频</h3>

<pre><code>$ ffmpeg -f x11grab -s wxga -r 25 -i :0.0 -sameq /tmp/out.mpg
</code></pre>

<p>fmpeg的通常用法是，根据一堆参数，输出一个文件，输出文件通常放最后，下面解析下几个参数：</p>

<ul>
<li>-f x11grab 指定输入类型。因为x11的缓冲区不是普通的视频文件可以侦测格式，必须指定后ffmpeg才知道如何获得输入。</li>
<li>-s wxga 设置抓取区域的大小。wxga是1366*768的标准说法，也可以换成-s 800×600的写法。</li>
<li>-r 25 设置帧率，即每秒抓取的画面数。</li>
<li>-i :0.0 设置输入源，本地X默认在0.0</li>
<li>-sameq 保持跟输入流一样的图像质量，以用来后期处理。</li>
</ul>


<h3>用编辑器来输入命令</h3>

<pre><code>command &lt;CTRL-x CTRL-e&gt;
</code></pre>

<p>在已经敲完的命令后按 <CTRL-x CTRL-e> ，会打开一个你指定的编辑器（比如vim，通过环境变量$EDITOR指定），里面就是你刚输入的命令，然后爱怎么编辑就怎么编辑吧，特别是那些参数异常复杂的程序，比如mencoder/ffmpeg，一个命令动辄3、4行的，要修改其中的参数，这个方法最合适不过了，保存退出后自动执行这个程序。实际上这是readline库的功能，在默认情况下，bash使用的是emacs模式的命令行操作方式， <CTRL-x CTRL-e>是调用这个功能的一个绑定。如果你习惯使用vi模式，按 <ESC v> 可以实现同样功能。如果你喜欢别的编辑器，可以在~/.bashrc里面放上比如export EDITOR=nano的命令。</p>

<h3>清空或创建一个文件</h3>

<pre><code>&gt; file.txt
</code></pre>

<blockquote><p>在shell里面是标准输出重定向符，即把（前部个命令的）命令行输出转往一个文件内，但这里没有&#8221;前部命令&#8221;，输出为空，于是就覆盖（或创建）成一个空文件了。有些脚本的写法是:>file.txt，因为:是bash默认存在的空函数。单纯创建文件也可以用$touch file.txt，touch本来是用作修改文件的时间戳，但如果文件不存在，就自动创建了。</p></blockquote>

<h3>用SSH创建端口转发通道</h3>

<pre><code>ssh -N -L2001:remotehost:80 user@somemachine
</code></pre>

<p>这个命令在本机打开了2001端口，对本机2001端口的请求通过somemachine作为跳板，转到remotehost的80端口上。
实现效果跟术语反向代理是相似的，实际上就是端口转发，注意上面的描述涉及了3台主机，但当然somemachine可以变成localhost。
这个命令比较抽象，但有时候是很有用的，比如因为众所周知的原因国内的IP的80端口无法使用，又或者公司的防火墙只给外网开了ssh端口，需要访问内部服务器一个web应用，以及需要访问某些限定了来源IP的服务，就可以用上这个方法了。
举一个具体例子，运行：</p>

<pre><code>ssh -f -N -L 0.0.0.0:443:twitter.com:443 shell.cjb.net
ssh -f -N -L 0.0.0.0:80:twitter.com:80 shell.cjb.net
</code></pre>

<p>然后在/etc/hosts里面添加127.0.0.1 twitter.com，好吧剩下的你懂的。
当然通常做这个功能的反向代理，应该要用squid、nginx之类，ssh就算是轻量级的尝试吧！</p>

<h3>重置终端</h3>

<pre><code>reset
</code></pre>

<p>如果你试过不小心cat了某个二进制文件，很可能整个终端就傻掉了，可能不会换行，没法回显，大堆乱码之类的，这时候敲入reset回车，不管命令有没有显示，就能回复正常了。
实际上reset命令只是输出了一些特殊字符，我们看BusyBox里面最简单的reset程序的实现：</p>

<pre><code>printf("\033c\033(K\033[J\033[0m\033[?25h");
</code></pre>

<p>输出的这些字符对Shell是有特殊意义的：</p>

<pre><code>\033c: "ESC c" - 发送重置命令;
\033(K: "ESC ( K" - 重载终端的字符映射;
\033[J: "ESC [ J" - 清空终端内容;
\033[0m: "ESC [ 0 m" - 初始化字符显示属性;
\033[?25h: "ESC [ ? 25 h" - 让光标可见;
</code></pre>

<h3>午夜的时候执行某命令</h3>

<pre><code>echo cmd | at midnight
</code></pre>

<p>说的就是at这个组件，通常跟cron相提并论，不过at主要用于定时一次性任务，而cron定时周期性任务。</p>

<h3>远程传送麦克风语音</h3>

<pre><code>dd if=/dev/dsp | ssh username@host dd of=/dev/dsp
</code></pre>

<p>/dev/dsp是Linux下声卡的文件映射（Digital Signal Proccessor），从其中读数据就是录音，往里面写数据就是播放，相当简单！
dd是常用的数据拷贝程序，如果不同时指定if、of，就直接使用stdin/stdout来传输。
如果你没有远程主机，可以试试这样：</p>

<pre><code>dd if=/dev/dsp of=/dev/dsp
</code></pre>

<p>直接回放麦克风的声音，只是有一点延时。
但是如果有别的程序正在使用声卡，这个方法就不凑效了，因为一般的声卡都不允许多个音频流同时处理，可以借用alsa组件的工具，arecord跟aplay:</p>

<pre><code>arecord | ssh username@host aplay
</code></pre>

<p>本地回放就是：</p>

<pre><code>arecord | aplay
</code></pre>

<p>如果你想吓吓别人：</p>

<pre><code>cat /dev/urandom | ssh username@host aplay
</code></pre>

<h3>映射一个内存目录</h3>

<pre><code>mount -t tmpfs -o size=1024m tmpfs /mnt/ram
</code></pre>

<p>这个命令开了一块1G内存来当目录用。不过放心，如果里面没文件，是不会占用内存的，用多少占多少。
不过一般来说没必要手动挂载，因为多数发行版都会在fstab内预留了一个内存目录，挂载在/dev/shm，直接使用即可；最常见的用途是用内存空间来放Firefox的配置，可以让慢吞吞的FF快很多。</p>

<h3>用DIFF对比远程文件跟本地文件</h3>

<pre><code>ssh user@host cat /path/to/remotefile | diff /path/to/localfile -
</code></pre>

<p>diff通常的用法是从参数读入两个文件，而命令里面的-则是指从stdin读入了。</p>

<h3>查看系统中占用端口的进程</h3>

<pre><code>netstat -tulnp
</code></pre>

<p>Netstat是很常用的用来查看Linux网络系统的工具之一，这个参数可以背下来：</p>

<ul>
<li>-t: 显示TCP链接信息</li>
<li>-u: 显示UDP链接信息</li>
<li>-l: 显示监听状态的端口</li>
<li>-n: 直接显示ip，不做名称转换</li>
<li>-p: 显示相应的进程PID以及名称（要root权限）</li>
</ul>


<p>如果要查看关于sockets更详细占用信息等，可以使用lsof工具。</p>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[神级Linux Shell 上篇]]></title>
			<link>http://tillage.github.com/Linux/linux-shell/</link>
			<pubDate>2013-01-23T21:34:00+08:00</pubDate>
			<guid isPermaLink="false">http://tillage.github.com/Linux/linux-shell</guid>
 
			<source url="http://tillage.github.com/rss.xml"><![CDATA[Tillage]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<p>两种方式实现Octopress导航栏当前样式</p>

<ol>
<li>JS</li>
<li>liquid</li>
</ol>


<h3>JS方式</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">pathname</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">pathname</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#main-nav a&quot;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">pathname</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">().</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">().</span><span class="nx">toUpperCase</span><span class="p">())</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&quot;current&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;a.current&quot;</span><span class="p">).</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;a#index&quot;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&quot;current&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>在主题目录source/javascripts/加入上面代码，注意上面的#main-nav如有需要自行修改。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;main-nav&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">id=</span><span class="s">&quot;index&quot;</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Blog<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/archives&quot;</span><span class="nt">&gt;</span>Archives<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改source/_includes/custom/navigation.html，即加入id=&#8221;main-nav&#8221;和id=&#8221;index&#8221;</p>

<h3>Liquid</h3>

<p>（推荐使用）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># navigation text and url</span>
</span><span class='line'><span class="l-Scalar-Plain">navigation</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">text</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">主页</span>
</span><span class='line'>  <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">text</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Archives</span>
</span><span class='line'>  <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/archives/</span>
</span></code></pre></td></tr></table></div></figure>


<p>在_config.yml中加入navigation设置。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% capture p_url%}{{ page.url | remove: &#39;index.html&#39; }}{% endcapture %}
</span><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;main inner&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {% for link in site.navigation %}
</span><span class='line'>      {% assign current = nil %}
</span><span class='line'>      {% if p_url == link.url %}
</span><span class='line'>          {% assign current = &#39;current&#39; %}
</span><span class='line'>      {% endif %}
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>
</span><span class='line'>          <span class="nt">&lt;a</span>  <span class="err">{%</span><span class="na">if</span> <span class="na">current</span> <span class="err">!=</span> <span class="na">nil</span> <span class="err">%}</span><span class="na">class=</span><span class="s">&quot;{{current}}&quot;</span><span class="err">{%</span><span class="na">endif</span><span class="err">%}</span> <span class="err">{%</span> <span class="na">if</span> <span class="na">link</span><span class="err">.</span><span class="na">url =</span><span class="s">=</span> <span class="err">&quot;/&quot;</span> <span class="err">%}</span><span class="na">id=</span><span class="s">&quot;index&quot;</span><span class="err">{%</span> <span class="na">endif</span> <span class="err">%}</span> <span class="na">href=</span><span class="s">&quot;{{ link.url }}&quot;</span><span class="nt">&gt;</span>{{ link.text }}<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  {% endfor %}
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改source/_includes/custom/navigation.html,完全改变了。</p>

<h3>CSS</h3>

<p>完成上面步骤后，记得增加相应的CSS样式哦。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">&amp;</span><span class="nc">.current</span><span class="err">{</span>
</span><span class='line'>  <span class="na">background</span><span class="o">:</span> <span class="no">none</span> <span class="no">repeat</span> <span class="no">scroll</span> <span class="mi">0</span><span class="kt">%</span> <span class="mi">0</span><span class="kt">%</span> <span class="nf">rgba</span><span class="p">(</span><span class="mi">30</span><span class="o">,</span><span class="mi">179</span><span class="o">,</span><span class="mi">233</span><span class="o">,</span><span class="mi">1</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[Octopress navigation]]></title>
			<link>http://tillage.github.com/octopress/octopress-navigation/</link>
			<pubDate>2013-01-20T22:43:00+08:00</pubDate>
			<guid isPermaLink="false">http://tillage.github.com/octopress/octopress-navigation</guid>
 
			<source url="http://tillage.github.com/rss.xml"><![CDATA[Tillage]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<p>循环输出 3 篇文章</p>

<pre><code>for post in site.posts limit:3
endfor
</code></pre>

<p>循环输出最近 3 篇</p>

<pre><code>for post in site.posts offset:3 limit:3
endfor
</code></pre>

<p>日期</p>

<pre><code>page.date | date:"%B %b, %Y"
</code></pre>

<p>分页输出</p>

<pre><code>for post in paginator.posts
    content
endfor
</code></pre>

<p>分页</p>

<pre><code>if paginator.previous_page
    //判断输出前一个分页
    //"page" + paginator.previous_page
endif
if paginator.next_page
    //判断输出后一个分页
    //"page" + paginator.next_page
endif
for page in (1..paginator.total_pages)
    if page == paginator.page
        //如果是当前分页
        //page
    else
        //不是的话输出其他分页链接号码
        //"page" + page
    endif
endfor
</code></pre>

<p>文章页面显示前一篇文章和后一篇文章</p>

<pre><code>if page.previous
    //url:    page.previous.url
    //title:  page.previous.title | truncatewords:5
endif
if page.next
    //url:    page.next.url
    //title:  page.next.url | truncatewords:5
</code></pre>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[jekyll一些函数和技巧]]></title>
			<link>http://tillage.github.com/Jekyll/jekyll-utils/</link>
			<pubDate>2013-01-19T12:07:00+08:00</pubDate>
			<guid isPermaLink="false">http://tillage.github.com/Jekyll/jekyll-utils</guid>
 
			<source url="http://tillage.github.com/rss.xml"><![CDATA[Tillage]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<p>1.14-1.17
三天时间，夜以继日，不死不休下，终于搞定Octopress(包括age主题)。</p>

<p><code>Octopress</code>
<code>ruby</code></p>

<pre><code>html
css3
js
yaml
markdown
sass
</code></pre>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">math</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Discover if a number is prime</span><a href='http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/'>Source Article</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prime?</span>
</span><span class='line'>    <span class="p">(</span><span class="s1">&#39;1&#39;</span> <span class="o">*</span> <span class="nb">self</span><span class="p">)</span> <span class="o">!~</span> <span class="sr">/^1?$|^(11+?)\1+$/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>``` [language] [title] [url] [link text]
code snippet
```         
</code></pre>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[second]]></title>
			<link>http://tillage.github.com/tillage/second/</link>
			<pubDate>2013-01-17T00:01:00+08:00</pubDate>
			<guid isPermaLink="false">http://tillage.github.com/tillage/second</guid>
 
			<source url="http://tillage.github.com/rss.xml"><![CDATA[Tillage]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<h2>Global</h2>

<table>
<thead>
<tr>
<th>Variable </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>site     </td>
<td> Sitewide information + Configuration settings from _config.yml</td>
</tr>
<tr>
<td>page     </td>
<td> This is just the YAML Front Matter with 2 additions: url and content.</td>
</tr>
<tr>
<td>content  </td>
<td> In layout files, this contains the content of the subview(s). This is the variable used to insert the rendered content into the layout. This is not used in post files or page files.</td>
</tr>
<tr>
<td>paginator </td>
<td> When the paginate configuration option is set, this variable becomes available for use.</td>
</tr>
</tbody>
</table>


<h2>Site</h2>

<table>
<thead>
<tr>
<th>Variable    </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>site.time </td>
<td> The current Time (when you run the jekyll command).</td>
</tr>
<tr>
<td>site.posts </td>
<td> A reverse chronological list of all Posts.</td>
</tr>
<tr>
<td>site.related_posts </td>
<td> If the page being processed is a Post, this contains a list of up to ten related Posts. By default, these are low quality but fast to compute. For high quality but slow to compute results, run the jekyll command with the &#8211;lsi (latent semantic indexing) option.</td>
</tr>
<tr>
<td>site.categories.CATEGORY </td>
<td> The list of all Posts in category CATEGORY.</td>
</tr>
<tr>
<td>site.tags.TAG </td>
<td> The list of all Posts with tag TAG.</td>
</tr>
<tr>
<td>site.[CONFIGURATION_DATA] </td>
<td> As of 0.5.2, all data inside of your <em>config.yml is now available through the site variable. So for example, if you have url: http://mysite.com in your configuration file, then in your posts and pages it can be used like so: http://tillage.github.com. Jekyll does not parse a changed </em>config.yml in auto mode, you have to restart jekyll.</td>
</tr>
<tr>
<td>site.pages </td>
<td> The list of all (non-post) pages which contain YAML front matter.</td>
</tr>
</tbody>
</table>


<h2>Page</h2>

<table>
<thead>
<tr>
<th>Variable    </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>page.content    </td>
<td> The un-rendered content of the Page.</td>
</tr>
<tr>
<td>page.title  </td>
<td> The title of the Post.</td>
</tr>
<tr>
<td>page.url    </td>
<td> The URL of the Post without the domain. e.g. /2008/12/14/my-post.html</td>
</tr>
<tr>
<td>page.date   </td>
<td> The Date assigned to the Post. This can be overridden in a post’s front matter by specifying a new date/time in the format YYYY-MM-DD HH:MM:SS</td>
</tr>
<tr>
<td>page.id </td>
<td> An identifier unique to the Post (useful in RSS feeds). e.g. /2008/12/14/my-post</td>
</tr>
<tr>
<td>page.categories </td>
<td> The list of categories to which this post belongs. Categories are derived from the directory structure above the <em>posts directory. For example, a post at /work/code/</em>posts/2008-12-24-closures.textile would have this field set to [&#8216;work&#8217;, &#8216;code&#8217;]. These can also be specified in the YAML Front Matter</td>
</tr>
<tr>
<td>page.tags   </td>
<td> The list of tags to which this post belongs. These can be specified in the YAML Front Matter</td>
</tr>
<tr>
<td>page.next   </td>
<td> The chronologically newer post</td>
</tr>
<tr>
<td>page.previous   </td>
<td> The chronologically older post</td>
</tr>
</tbody>
</table>


<p>Note: Any custom front matter that you specify will be available under page. For example, if you specify custom_css: true in a page’s front matter, that value will be available in templates as page.custom_css</p>

<h2>Paginator</h2>

<p><strong>note: only available in index files, can be in subdirectory /blog/index.html</strong></p>

<table>
<thead>
<tr>
<th>Variable    </th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>paginator.per_page  </td>
<td> Number of posts per page.</td>
</tr>
<tr>
<td>paginator.posts </td>
<td> Posts available for that page.</td>
</tr>
<tr>
<td>paginator.total_posts   </td>
<td> Total number of posts.</td>
</tr>
<tr>
<td>paginator.total_pages   </td>
<td> Total number of pages.</td>
</tr>
<tr>
<td>paginator.page  </td>
<td> The number of the current page.</td>
</tr>
<tr>
<td>paginator.previous_page </td>
<td> The number of the previous page.</td>
</tr>
<tr>
<td>paginator.next_page </td>
<td> The number of the next page.</td>
</tr>
</tbody>
</table>


				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[Jekyll 主题变量]]></title>
			<link>http://tillage.github.com/Jekyll/jekyll-template-data/</link>
			<pubDate>2013-01-16T20:16:00+08:00</pubDate>
			<guid isPermaLink="false">http://tillage.github.com/Jekyll/jekyll-template-data</guid>
 
			<source url="http://tillage.github.com/rss.xml"><![CDATA[Tillage]]></source>
		</item>
		
	</channel>
</rss>
